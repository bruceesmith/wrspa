// Code generated by MockGen. DO NOT EDIT.
// Source: ../../interfaces.go
//
// Generated by this command:
//
//	mockgen -source=../../interfaces.go -destination=../../mocks/mocks.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	http "net/http"
	reflect "reflect"

	terminator "github.com/bruceesmith/terminator"
	gomock "go.uber.org/mock/gomock"
)

// MockClientInterface is a mock of ClientInterface interface.
type MockClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientInterfaceMockRecorder
	isgomock struct{}
}

// MockClientInterfaceMockRecorder is the mock recorder for MockClientInterface.
type MockClientInterfaceMockRecorder struct {
	mock *MockClientInterface
}

// NewMockClientInterface creates a new mock instance.
func NewMockClientInterface(ctrl *gomock.Controller) *MockClientInterface {
	mock := &MockClientInterface{ctrl: ctrl}
	mock.recorder = &MockClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientInterface) EXPECT() *MockClientInterfaceMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockClientInterface) Get(path string) ([]byte, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", path)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockClientInterfaceMockRecorder) Get(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockClientInterface)(nil).Get), path)
}

// GetRandom mocks base method.
func (m *MockClientInterface) GetRandom() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRandom")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetRandom indicates an expected call of GetRandom.
func (mr *MockClientInterfaceMockRecorder) GetRandom() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRandom", reflect.TypeOf((*MockClientInterface)(nil).GetRandom))
}

// MockServerInterface is a mock of ServerInterface interface.
type MockServerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockServerInterfaceMockRecorder
	isgomock struct{}
}

// MockServerInterfaceMockRecorder is the mock recorder for MockServerInterface.
type MockServerInterfaceMockRecorder struct {
	mock *MockServerInterface
}

// NewMockServerInterface creates a new mock instance.
func NewMockServerInterface(ctrl *gomock.Controller) *MockServerInterface {
	mock := &MockServerInterface{ctrl: ctrl}
	mock.recorder = &MockServerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServerInterface) EXPECT() *MockServerInterfaceMockRecorder {
	return m.recorder
}

// API mocks base method.
func (m *MockServerInterface) API(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "API", w, r)
}

// API indicates an expected call of API.
func (mr *MockServerInterfaceMockRecorder) API(w, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "API", reflect.TypeOf((*MockServerInterface)(nil).API), w, r)
}

// MarshalFailure mocks base method.
func (m *MockServerInterface) MarshalFailure(function string, err error, response any) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarshalFailure", function, err, response)
	ret0, _ := ret[0].(string)
	return ret0
}

// MarshalFailure indicates an expected call of MarshalFailure.
func (mr *MockServerInterfaceMockRecorder) MarshalFailure(function, err, response any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalFailure", reflect.TypeOf((*MockServerInterface)(nil).MarshalFailure), function, err, response)
}

// SPAFile mocks base method.
func (m *MockServerInterface) SPAFile(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SPAFile", w, r)
}

// SPAFile indicates an expected call of SPAFile.
func (mr *MockServerInterfaceMockRecorder) SPAFile(w, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SPAFile", reflect.TypeOf((*MockServerInterface)(nil).SPAFile), w, r)
}

// Serve mocks base method.
func (m *MockServerInterface) Serve(t *terminator.Terminator) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Serve", t)
}

// Serve indicates an expected call of Serve.
func (mr *MockServerInterfaceMockRecorder) Serve(t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Serve", reflect.TypeOf((*MockServerInterface)(nil).Serve), t)
}

// Settings mocks base method.
func (m *MockServerInterface) Settings(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Settings", w, r)
}

// Settings indicates an expected call of Settings.
func (mr *MockServerInterfaceMockRecorder) Settings(w, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Settings", reflect.TypeOf((*MockServerInterface)(nil).Settings), w, r)
}

// SpecialRandom mocks base method.
func (m *MockServerInterface) SpecialRandom(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SpecialRandom", w, r)
}

// SpecialRandom indicates an expected call of SpecialRandom.
func (mr *MockServerInterfaceMockRecorder) SpecialRandom(w, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SpecialRandom", reflect.TypeOf((*MockServerInterface)(nil).SpecialRandom), w, r)
}

// WikiPage mocks base method.
func (m *MockServerInterface) WikiPage(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WikiPage", w, r)
}

// WikiPage indicates an expected call of WikiPage.
func (mr *MockServerInterfaceMockRecorder) WikiPage(w, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WikiPage", reflect.TypeOf((*MockServerInterface)(nil).WikiPage), w, r)
}

// WikipediaFile mocks base method.
func (m *MockServerInterface) WikipediaFile(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WikipediaFile", w, r)
}

// WikipediaFile indicates an expected call of WikipediaFile.
func (mr *MockServerInterfaceMockRecorder) WikipediaFile(w, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WikipediaFile", reflect.TypeOf((*MockServerInterface)(nil).WikipediaFile), w, r)
}
